{
  "content_hash": "19c223523c008195e4825691f1a368eef9e78ee15a625f488bbf8d7d59596106",
  "share_id": "aptj0n",
  "title": "AutoBNN: Probabilistic time series forecasting with compositional bayesian neural networks",
  "optimized_headline": "Unlocking Probabilistic Time Series Forecasting with Compositional Bayesian Neural Networks",
  "url": "http://blog.research.google/2024/03/autobnn-probabilistic-time-series.html",
  "source": "Google AI Blog",
  "published_at": "2024-03-28T20:53:00.000Z",
  "raw_excerpt": "Posted by Urs Köster, Software Engineer, Google Research\n\n\n\n\nTime series problems are ubiquitous, from forecasting weather and traffic patterns to understanding economic trends. Bayesian approaches start with an assumption about the data's patterns (prior probability), collecting evidence (e.g., new time series data), and continuously updating that assumption to form a posterior probability distri",
  "raw_body": "Posted by Urs Köster, Software Engineer, Google Research\n\n\n\n\nTime series problems are ubiquitous, from forecasting weather and traffic patterns to understanding economic trends. Bayesian approaches start with an assumption about the data's patterns (prior probability), collecting evidence (e.g., new time series data), and continuously updating that assumption to form a posterior probability distribution. Traditional Bayesian approaches like Gaussian processes (GPs) and Structural Time Series are extensively used for modeling time series data, e.g., the commonly used Mauna Loa CO2 dataset. However, they often rely on domain experts to painstakingly select appropriate model components and may be computationally expensive. Alternatives such as neural networks lack interpretability, making it difficult to understand how they generate forecasts, and don't produce reliable confidence intervals. \n\n\n\nTo that end, we introduce AutoBNN, a new open-source package written in JAX. AutoBNN automates the discovery of interpretable time series forecasting models, provides high-quality uncertainty estimates, and scales effectively for use on large datasets. We describe how AutoBNN combines the interpretability of traditional probabilistic approaches with the scalability and flexibility of neural networks.\n\n\n\n    \nAutoBNN\nline of research that over the past decade has yielded improved predictive accuracy by modeling time series using GPs with learned kernel structures. The kernel function of a GP encodes assumptions about the function being modeled, such as the presence of trends, periodicity or noise.  With learned GP kernels, the kernel function is defined compositionally: it is either a base kernel (such as Linear, Quadratic, Periodic, Matérn or ExponentiatedQuadratic) or a composite that combines two or more kernel functions using operators such as Addition, Multiplication, or ChangePoint. This compositional kernel structure serves two related purposes. First, it is simple enough that a user who is an expert about their data, but not necessarily about GPs, can construct a reasonable prior for their time series. Second, techniques like Sequential Monte Carlo can be used for discrete searches over small structures and can output interpretable results.\nBayesian neural networks (BNNs) while retaining the compositional kernel structure. A BNN is a neural network with a probability distribution over weights rather than a fixed set of weights. This induces a distribution over outputs, capturing uncertainty in the predictions. BNNs bring the following advantages over GPs: First, training large GPs is computationally expensive, and traditional training algorithms scale as the cube of the number of data points in the time series. In contrast, for a fixed width, training a BNN will often be approximately linear in the number of data points. Second, BNNs lend themselves better to GPU and TPU hardware acceleration than GP training operations. Third, compositional BNNs can be easily combined with traditional deep BNNs, which have the ability to do feature discovery. One could imagine \"hybrid\" architectures, in which users specify a top-level structure of Add(Linear, Periodic, Deep), and the deep BNN is left to learn the contributions from potentially high-dimensional covariate information.\n\n\n\nHow might one translate a GP with compositional kernels into a BNN then? A single layer neural network will typically converge to a GP as the number of neurons (or \"width\") goes to infinity. More recently, researchers have discovered a correspondence in the other direction — many popular GP kernels (such as Matern, ExponentiatedQuadratic, Polynomial or Periodic) can be obtained as infinite-width BNNs with appropriately chosen activation functions and weight distributions. Furthermore, these BNNs remain close to the corresponding GP even when the width is very much less than infinite. For example, the figures below show the difference in the covariance between pairs of observations, and regression results of the true GPs and their corresponding width-10 neural network versions.\n\n\n\n\nComparison of Gram matrices between true GP kernels (top row) and their width 10 neural network approximations (bottom row).\n\n\n\nComparison of regression results between true GP kernels (top row) and their width 10 neural network approximations (bottom row).\n\nBNN analogues of the Addition and Multiplication operators over GPs, and input warping to produce periodic kernels. BNN addition is straightforwardly given by adding the outputs of the component BNNs. BNN multiplication is achieved by multiplying the activations of the hidden layers of the BNNs and then applying a shared dense layer. We are therefore limited to only multiplying BNNs with the same hidden width.\n\n\n\n    \nUsing AutoBNN\npackage is available within Tensorflow Probability. It is implemented in JAX and uses the flax.linen neural network library. It implements all of the base kernels and operators discussed so far (Linear, Quadratic, Matern, ExponentiatedQuadratic, Periodic, Addition, Multiplication) plus one new kernel and three new operators:  \n\n\n\n\na OneLayer kernel, a single hidden layer ReLU BNN,\n\n\na ChangePoint operator that allows smoothly switching between two kernels,\n\n\na LearnableChangePoint operator which is the same as ChangePoint except position and slope are given prior distributions and can be learnt from the data, and\n\n\na WeightedSum operator.\n\n\n\n\n\nWeightedSum combines two or more BNNs with learnable mixing weights, where the learnable weights follow a Dirichlet prior. By default, a flat Dirichlet distribution with concentration 1.0 is used.\n\n\n\nWeightedSums allow a \"soft\" version of structure discovery, i.e., training a linear combination of many possible models at once. In contrast to structure discovery with discrete structures, such as in AutoGP, this allows us to use standard gradient methods to learn structures, rather than using expensive discrete optimization. Instead of evaluating potential combinatorial structures in series, WeightedSum allows us to evaluate them in parallel. \n\n\n\nTo easily enable exploration, AutoBNN defines a number of model structures that contain either top-level or internal WeightedSums. The names of these models can be used as the first parameter in any of the estimator constructors, and include things like sum_of_stumps (the WeightedSum over all the base kernels) and sum_of_shallow (which adds all possible combinations of base kernels with all operators).\n\n\nIllustration of the sum_of_stumps model. The bars in the top row show the amount by which each base kernel contributes, and the bottom row shows the function represented by the base kernel. The resulting weighted sum is shown on the right.\n\nM3 dataset. The six base structures were ExponentiatedQuadratic (which is the same as the Radial Basis Function kernel, or RBF for short), Matern, Linear, Quadratic, OneLayer and Periodic kernels. The figure shows the MAP estimates of their weights over an ensemble of 32 particles. All of the high likelihood particles gave a large weight to the Periodic component, low weights to Linear, Quadratic and OneLayer, and a large weight to either RBF or Matern.\n\n\n\n\n\n\nParallel coordinates plot of the MAP estimates of the base kernel weights over 32 particles. The sum_of_stumps model was trained on the N374 series from the M3 dataset (insert in blue). Darker lines correspond to particles with higher likelihoods.\n\nWeightedSums as the inputs to other operators, it is possible to express rich combinatorial structures, while keeping models compact and the number of learnable weights small. As an example, we include the sum_of_products model (illustrated in the figure below) which first creates a pairwise product of two WeightedSums, and then a sum of the two products. By setting some of the weights to zero, we can create many different discrete structures. The total number of possible structures in this model is 216, since there are 16 base kernels that can be turned on or off. All these structures are explored implicitly by training just this one model.\n\n\n\n\n\nIllustration of the \"sum_of_products\" model. Each of the four WeightedSums have the same structure as the \"sum_of_stumps\" model.\n\nPeriodic and either the Matern or ExponentiatedQuadratic) lead to overfitting on many datasets. To prevent this, we have defined model classes like sum_of_safe_shallow that exclude such products when performing structure discovery with WeightedSums.\n\n\n\nFor training, AutoBNN provides AutoBnnMapEstimator and AutoBnnMCMCEstimator to perform MAP and MCMC inference, respectively. Either estimator can be combined with any of the six likelihood functions, including four based on normal distributions with different noise characteristics for continuous data and two based on the negative binomial distribution for count data.  \n\n\n\n\n\n\nResult from running AutoBNN on the Mauna Loa CO2 dataset in our example colab. The model captures the trend and seasonal component in the data. Extrapolating into the future, the mean prediction slightly underestimates the actual trend, while the 95% confidence interval gradually increases.\n\nscikit-learn–inspired estimator interface:\nimport autobnn as ab\n\nmodel = ab.operators.Add(\n    bnns=(ab.kernels.PeriodicBNN(width=50),\n          ab.kernels.LinearBNN(width=50),\n          ab.kernels.MaternBNN(width=50)))\n\nestimator = ab.estimators.AutoBnnMapEstimator(\n    model, 'normal_likelihood_logistic_noise', jax.random.PRNGKey(42),\n    periods=[12])\n\nestimator.fit(my_training_data_xs, my_training_data_ys)\nlow, mid, high = estimator.predict_quantiles(my_training_data_xs)\n\n\n\n\n\n    \nConclusion\nAutoBNN provides a powerful and flexible framework for building sophisticated time series prediction models. By combining the strengths of BNNs and GPs with compositional kernels, AutoBNN opens a world of possibilities for understanding and forecasting complex data. We invite the community to try the colab, and leverage this library to innovate and solve real-world challenges. \n\n\n\n    \nAcknowledgements\nAutoBNN was written by Colin Carroll, Thomas Colthurst, Urs Köster and Srinivas Vasudevan. We would like to thank Kevin Murphy, Brian Patton and Feras Saad for their advice and feedback.",
  "category": "capabilities_and_how",
  "category_confidence": "medium",
  "speedrun": "AutoBNN is a new open-source package from Google Research that automates the creation of interpretable time series forecasting models using Bayesian neural networks (BNNs). It combines the interpretability of traditional Bayesian methods with the scalability of neural networks, specifically designed for large datasets. A critical limitation is that the package's effectiveness on very complex or highly irregular datasets is not specified. This development matters now as industries increasingly rely on accurate forecasting for decision-making.",
  "why_it_matters": [
    "Data scientists and analysts will benefit immediately from AutoBNN's ability to automate model selection, saving time and improving forecast accuracy in sectors like finance and climate science.",
    "The introduction of AutoBNN could shift market dynamics by democratizing access to advanced forecasting tools, allowing smaller companies to compete with larger firms that traditionally dominate this space."
  ],
  "lenses": {
    "eli12": "Imagine AutoBNN as a smart assistant that helps you choose the best recipe for a dish based on the ingredients you have. It helps data scientists by simplifying complex forecasting tasks but watch out for potential errors in highly unpredictable scenarios. Young people should care because mastering such tools can lead to exciting career opportunities in data science and AI.",
    "pm": "A specific use case for AutoBNN could be in retail demand forecasting, allowing companies like Walmart to optimize inventory levels. This tool provides a competitive edge by automating model selection, reducing reliance on expert data scientists. However, users must be aware of the dependency on high-quality input data for accurate predictions. A product manager should prioritize user feedback to refine the interface and usability of AutoBNN.",
    "engineer": "AutoBNN employs a probabilistic framework to automate model discovery using Bayesian neural networks, which can efficiently scale with data size. A key limitation is that the effectiveness of the models on highly irregular data patterns is not specified. Compared to traditional Gaussian processes, which scale cubically with data points, AutoBNN's linear scaling offers significant performance improvements. A technical red flag is the potential for overfitting if not managed properly, especially with complex datasets."
  },
  "hype_meter": 4,
  "model_meta": {
    "model": "gpt-4o-mini",
    "prompt_version": "v2.0"
  },
  "created_at": "2025-08-23T08:23:30.538Z",
  "updated_at": "2025-08-23T08:23:30.538Z",
  "processing_order": 1755937410539
}